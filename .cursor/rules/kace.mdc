---
description: 
globs: 
alwaysApply: true
---
# KAce框架Server端开发Ruler

## 架构原则
- 坚持单体架构设计，避免引入微服务复杂性
- 确保核心模块与插件系统边界清晰，避免核心功能渗透到插件中
- 遵循"简化的领域驱动设计"，不过度设计

## 插件系统规范
- 插件必须实现标准Plugin接口，包含完整生命周期方法
- 插件间依赖必须显式声明，避免隐式依赖
- 插件应遵循"独立性原则"：独立数据模型、API路由、权限点、菜单项
- 插件不得直接访问其他插件内部实现，只能通过公开接口交互

## 权限系统准则
- 严格遵循"资源:操作:范围"的权限命名规范
- 确保每个API端点都有权限检查
- 实现多层次权限控制：API权限、数据权限、UI元素权限
- 避免硬编码权限检查，使用权限服务进行统一管理

## 数据库设计规则
- 核心表使用统一前缀，插件表使用插件ID作为前缀
- 插件负责自己的表结构版本管理和迁移
- 支持多种数据库，避免使用特定数据库的专有特性
- 数据模型设计要考虑权限控制需求，包含所有权信息

## 配置管理原则
- 严格区分系统级配置和插件级配置
- 敏感信息必须加密存储或通过环境变量注入
- 系统配置变更需重启，插件配置应支持热更新
- 配置结构要清晰合理，避免过度嵌套

## 代码实现准则
- 遵循Kotlin官方代码风格
- 优先使用Kotlin协程处理异步操作
- 确保核心API有完整文档和单元测试
- 避免在共享代码中使用平台特定API
- 每次完成一小部分功能后立即编译运行验证，成功后在TODO LIST中标记完成并继续下一任务

## 前后端交互规范
- API响应格式统一，包含success、data、message字段
- 错误处理统一，包含错误码和国际化错误消息
- 前端权限控制与后端一致，避免仅依赖UI隐藏

- 数据传输使用DTO模式，避免直接暴露实体模型